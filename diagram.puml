@startuml
class Subject implements TSubject {
    #observers: Function[]
    +addObserver(o: Function): Function[]
    +removeObserver(o: Function): Function[]
    +notifyObservers(data: any): void
}
class Model extends Subject implements TModel {
    -directionMod: 1 | -1
    -options: TModelOptions
    -values: number[]
    +getConfig(): TModelOptions
    +setConfig(o?: TModelOptions): TModelOptions
    +getValue(index: number): number
    +getValues(): number[]
    +setValue(index: number, value: number): number
    +setValues(v: number[]): number[]
    -setEachValue(): void
    -configureDirection(): void
    -configureMinValue(newMinValue: number): void
    -configureMaxValue(newMaxValue: number): void
    -configureStepSize(newStepSize: number): void
    -configureHandlerCount(newHandlerCount: number): void
    -configureSingleOption(key: string, value: number): void
    -configureFourOptions(o: TModelOptions): void
    -configure(o: TModelOptions): TModelOptions
    -initValues(): void
    -normalizeValue(value: number): number
    -updateValues(updatedIndex: number, updatedValue: number): void
    +{static} isNumber(n: any): boolean
}
class Panel implements TPanel {
    -options: TSliderOptions
    -slider: TSlider
    -UI: TPanelElements
    +update(values: number[]): void
    -updateInputCount(): void
    -init(slider: TSlider): void
    -onValueInputChange(e: KeyboardEvent, valueIndex: number): void
    -renderValueInputs(): void
    -setMinValue(e: KeyboardEvent): void
    -setMaxValue(e: KeyboardEvent): void
    -setStepSize(e: KeyboardEvent): void
    -setHandlerCount(e: KeyboardEvent): void
    -setIsHorizontal(e: Event): void
    -setShowProgress(e: Event): void
    -setShowScale(e: Event): void
    -setShowTooltip(e: Event): void
    -createMinValueInput(): void
    -createMaxValueInput(): void
    -createStepSizeInput(): void
    -createHandlerCountInput(): void
    -createIsHorizontalInput(): void
    -createShowProgressInput(): void
    -createShowScaleInput(): void
    -createShowTooltipInput(): void
    -render(): void
    +{static} createInput(parent: HTMLElement, labelText: string, isCheckbox?: boolean): HTMLInputElement
}
class Presenter implements TPresenter {
    -model: TModel
    -view: TView
    +init(): void
    +getValues(): number[]
    +setModelValue(index: number, value: number): number
    +update(v: number[]): void
}
class Handler implements THandler {
    -coord: number
    -id: number
    -layout: string
    -tooltip: boolean
    -UI: THandlerElements
    -value: number
    +getElement(): HTMLElement
    +setPosition(coord: number): void
    +setZIndex(sliderLength: number, coord: number): void
    +toggleTooltip(value?: boolean): boolean
    +toggleLayout(layout: "horizontal" | "vertical"): void
    +updateValue(value: number): void
    -createHandler(): HTMLElement
    -createTooltip(): HTMLElement
    -init(o: THandlerOptions): void
    -updateTooltip(): void
}
class Progress implements TProgress {
    -coords: TProgressCoords
    -isHorizontal: boolean
    -UIprogress: HTMLElement
    +getElement(): HTMLElement
    +setCoords(coords: TProgressCoords): void
    +toggleHorizontal(isHorizontal: boolean): void
    -setStyle(): void
}
class Scale extends Subject implements TScale {
    -markValues: number[]
    -stepCountLimit: number
    -options: TSliderOptions
    -UI: TScaleElements
    +getElement(): HTMLUListElement
    +toggleLayout(layout: "horizontal" | "vertical"): void
    +setConfig(newOptions: TModelOptions): void
    -calcScaleStep(): number
    -createScaleMark(value: number, position: number): HTMLLIElement
    -populateScale(): HTMLUListElement
    -onClick(e: MouseEvent): void
    -render(): HTMLUListElement
}
class Track extends Subject implements TTrack {
    -isHorizontal: boolean
    -UItrack: HTMLElement
    +getElement(): HTMLElement
    +getRect(): { trackLength: number; trackMin: number; trackMax: number; }
    +toggleLayout(isHorizontal: boolean): void
    -onMousedown(e: MouseEvent): void
    -create(isHorizontal: boolean): HTMLElement
}
class View extends Subject implements TView {
    -children: TViewChildren
    -container: HTMLElement
    -grabOffset: number
    -modelOptions: TModelOptions
    -options: TViewOptions
    -UI: TViewElements
    -values: number[]
    +setValues(values: number[]): void
    +getConfig(): TViewOptions
    +setConfig(o: TViewOptions): TViewOptions
    +setModelOptions(o: TSliderOptions): TModelOptions
    +onScaleClick(value: number): void
    +onTrackMousedown(e: MouseEvent): void
    -update(): void
    -addScale(o: TModelOptions): void
    -toggleScale(showScale: boolean): void
    -init(o: TSliderOptions): void
    -render(): HTMLElement
    -createHandlers(): void
    -correctHandlerCoord(): number
    -coordToValue(coord: number): number
    -valueToCoord(value: number): number
    -elCreateSlider(): HTMLElement
    -createTrack(): HTMLElement
    -calcProgressCoords(): TProgressCoords
    -createProgress(): void
    -updateProgress(): void
    -toggleProgress(progress: boolean): void
    -addHandler(index: number): THandler
    -setGrabbedOffset(e: MouseEvent): void
    -grab(e: MouseEvent, handler: HTMLElement): void
    -updateHandlers(): void
    -getRelativeCoord(e: MouseEvent): number
    -getClosestHandlerIndex(goal: number): number
    -moveHandler(coord: number): void
    -drag(e: MouseEvent): void
    -release(): void
    -updateOrientation(horizontal?: boolean): void
    -configure(o: TViewOptions): TViewOptions
}
@enduml