@startuml
interface Subject {
    +addObserver: (o: Function) => Function[]
    +removeObserver: (o: Function) => Function[]
    +notifyObservers: (...notifyData: any) => void
}
interface Slider {
    +addObserver(o: Function): void
    +getContainer(): HTMLElement
    +setConfig(o: SliderOptions): SliderOptions
    +getConfig(): SliderOptions
    +getValue(index?: number): number
    +setValue(index: number, value: number): number
    +getValues(): number[]
    +setValues(values?: number[]): number[]
}
interface Model extends Subject {
    +getConfig(): ModelOptions
    +setConfig(o?: ModelOptions): ModelOptions
    +getValue(index: number): number
    +getValues(): number[]
    +setValue(index: number, v: number): number
    +setValues(v: number[]): number[]
}
interface Handler {
    +getElement(): HTMLElement
    +setPosition(coord: number): void
    +toggleTooltip(value?: boolean): boolean
    +toggleLayout(layout: "horizontal" | "vertical"): void
    +updateValue(value: number): void
}
interface Progress {
    +getElement: () => HTMLElement
    +setCoords: (coords: ProgressCoords) => void
    +toggleHorizontal: (isHorizontal: boolean) => void
}
interface Scale extends Subject {
    +getElement: () => HTMLUListElement
    +toggleLayout: (layout: 'horizontal' | 'vertical') => void
    +setConfig: (o: ModelOptions) => void
}
interface Track extends Subject {
    +getElement: () => HTMLElement
    +getRect: () => any
    +toggleLayout: (isHorizontal: boolean) => void
}
interface View extends Subject {
    +getConfig(): ViewOptions
    +setConfig(o: ViewOptions): ViewOptions
    +setModelOptions(o: SliderOptions): ModelOptions
    +setValues(v: number[]): void
}
interface Presenter {
    +getValues(): number[]
    +setModelValue(index: number, value: number): number
}
interface Panel {
    +update(v: number[]): void
}
class RSubject implements Subject {
    #observers: Function[]
    +addObserver(o: Function): Function[]
    +removeObserver(o: Function): Function[]
    +notifyObservers(data: any): void
}
class RSModel extends RSubject implements Model {
    -directionMod: 1 | -1
    -options: ModelOptions
    -values: number[]
    +getConfig(): ModelOptions
    +setConfig(o?: ModelOptions): ModelOptions
    +getValue(index: number): number
    +getValues(): number[]
    +setValue(index: number, value: number): number
    +setValues(v: number[]): number[]
    -setEachValue(): void
    -configureDirection(): void
    -configureMinValue(newMinValue: number): void
    -configureMaxValue(newMaxValue: number): void
    -configureStepSize(newStepSize: number): void
    -configureHandlerCount(newHandlerCount: number): void
    -configureSingleOption(key: string, value: number): void
    -configureFourOptions(o: ModelOptions): void
    -configure(o: ModelOptions): ModelOptions
    -initValues(): void
    -normalizeValue(value: number): number
    -updateValues(updatedIndex: number, updatedValue: number): void
    +{static} isNumber(n: any): boolean
}
interface Presenter {
    +init(): void
    +getValues(): number[]
    +setModelValue(index: number, value: number): number
}
class RSPresenter implements Presenter {
    -model: Model
    -view: View
    +init(): void
    +getValues(): number[]
    +setModelValue(index: number, value: number): number
    +update(v: number[]): void
}
class RSProgress implements Progress {
    -coords: ProgressCoords
    -isHorizontal: boolean
    -UIprogress: HTMLElement
    +getElement(): HTMLElement
    +setCoords(coords: ProgressCoords): void
    +toggleHorizontal(isHorizontal: boolean): void
    -setStyle(): void
}
class RSHandler implements Handler {
    -coord: number
    -id: number
    -layout: string
    -tooltip: boolean
    -UI: HandlerElements
    -value: number
    +getElement(): HTMLElement
    +setPosition(coord: number): void
    +toggleTooltip(value?: boolean): boolean
    +toggleLayout(layout: "horizontal" | "vertical"): void
    +updateValue(value: number): void
    -createHandler(): HTMLElement
    -createTooltip(): HTMLElement
    -init(o: HandlerOptions): void
    -updateTooltip(): void
}
class RScale extends RSubject implements Scale {
    -markValues: number[]
    -stepCountLimit: number
    -options: SliderOptions
    -UI: ScaleElements
    +getElement(): HTMLUListElement
    +toggleLayout(layout: "horizontal" | "vertical"): void
    +setConfig(newOptions: ModelOptions): void
    -calcScaleStep(): number
    -populateScale(): HTMLUListElement
    -onClick(e: MouseEvent): void
    -render(): HTMLUListElement
}
class RSTrack extends RSubject implements Track {
    -isHorizontal: boolean
    -UItrack: HTMLElement
    +getElement(): HTMLElement
    +getRect(): { trackLength: number; trackMin: number; trackMax: number; }
    +toggleLayout(isHorizontal: boolean): void
    -onMousedown(e: MouseEvent): void
    -create(isHorizontal: boolean): HTMLElement
}
class RSView extends RSubject implements View {
    -children: ViewChildren
    -container: HTMLElement
    -grabOffset: number
    -modelOptions: ModelOptions
    -options: ViewOptions
    -UI: ViewElements
    -values: number[]
    +setValues(values: number[]): void
    +getConfig(): ViewOptions
    +setConfig(o: ViewOptions): ViewOptions
    +setModelOptions(o: SliderOptions): ModelOptions
    +onScaleClick(value: number): void
    +onTrackMousedown(e: MouseEvent): void
    -update(): void
    -addScale(o: ModelOptions): void
    -toggleScale(showScale: boolean): void
    -init(o: SliderOptions): void
    -render(): HTMLElement
    -createHandlers(): void
    -correctHandlerCoord(): number
    -coordToValue(coord: number): number
    -valueToCoord(value: number): number
    -elCreateSlider(): HTMLElement
    -createTrack(): HTMLElement
    -calcProgressCoords(): ProgressCoords
    -createProgress(): void
    -updateProgress(): void
    -toggleProgress(progress: boolean): void
    -addHandler(index: number): Handler
    -setGrabbedOffset(e: MouseEvent): void
    -grab(e: MouseEvent, handler: HTMLElement): void
    -updateHandlers(): void
    -getRelativeCoord(e: MouseEvent): number
    -getClosestHandlerIndex(goal: number): number
    -moveHandler(coord: number): void
    -drag(e: MouseEvent): void
    -release(): void
    -updateOrientation(horizontal?: boolean): void
    -configure(o: ViewOptions): ViewOptions
}
class RSPanel implements Panel {
    -options: SliderOptions
    -slider: Slider
    -UI: PanelElements
    +update(values: number[]): void
    -updateInputCount(): void
    -init(s: Slider): void
    -onValueInputChange(e: KeyboardEvent, valueIndex: number): void
    -renderValueInputs(): void
    -setMinValue(e: KeyboardEvent): void
    -setMaxValue(e: KeyboardEvent): void
    -setStepSize(e: KeyboardEvent): void
    -setHandlerCount(e: KeyboardEvent): void
    -setIsHorizontal(e: Event): void
    -setShowProgress(e: Event): void
    -setShowScale(e: Event): void
    -setShowTooltip(e: Event): void
    -createMinValueInput(): void
    -createMaxValueInput(): void
    -createStepSizeInput(): void
    -createHandlerCountInput(): void
    -createIsHorizontalInput(): void
    -createShowProgressInput(): void
    -createShowScaleInput(): void
    -createShowTooltipInput(): void
    -render(): void
    +{static} createInput(parent: HTMLElement, labelText: string, isCheckbox?: boolean): HTMLInputElement
}
@enduml